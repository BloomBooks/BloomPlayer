{
    // This works with the vscode debug Chrome extension, which you need to install (Ctrl+P: "ext install Debugger for Chrome")

     // First, in a command prompt, run chrome in debugger mode:
     //     "c:/Program Files (x86)/Google/Chrome/Application/chrome.exe" --remote-debugging-port=9222 -no-first-run --incognito --disable-extensions

    // === To use with a local server ===
    // 0) Put the folder of the book you want to test somewhere other than our shared dropbox
    //   (because you're going to mess with it in a way that doesn't work on other computers)
    // 1) If you don't have it already, get a light-weight local server like nws or http-server (npm install -g nws)
    // 2) In a cmd prompt with admin permissions, cd to the folder holding the book you want to test.
    //    In Windows, mklink /H bloomPlayer.js c:\bloomPlayer\output\bloomPlayer.js  . Now the server will find the js as if it existed in the book folder.
    // 4) the html should just be asking for "bloomPlayer.js", no other path.
    // 4) make sure the book is named index.html
    // 5) Start up the server there (e.g. 'nws'). In chrome, confirm that you can see the book via "http://localhost:3030//index.html"
    // 6) set the "URL" line below to http://localhost:3030

    // === To use with file system instead of a local server: ===
    // 1) In the /output directory, Create an index.html that contains:
    //   <meta http-equiv="refresh" content="0;url=file:///path-to-the-book-you-want-to-test-with/index.html">
    // 2) set the "URL" line below to "${workspaceRoot}/output/index.html"
    // 3) the html should be asking for "c:\bloomPlayer\output\bloomPlayer.js" (if you have that c:\bloomPlayer junction set up to point to your actual output folder, via "mklink /j bloomPlayer path-to-your-bloomPlayer-repository").
    //  Alternatively, you can make a "Hard link" so that it looks like bloomPlayer.js is in the folder, but it's actually pointing to you
    //  output/bloomPlayer. To do that on windows,  a cmd prompt with admin permissions, do mklink /H bloomplayer.js c:\bloomPlayer\output\bloomPlayer.js

    // Finally here in VSCODE, run Debug (F5, once you've done it once)

    // This should open the page in Chrome. Breakpoints should point to the typescript.

    // Troubleshooting tips:
    // * Try restarting (clears out the bazillion chromes around), which somehow interfer.
    // * Try avoiding using chrome for other things while doing this (e.g. use FF).
    // * Uncomment the diagnosticLogging line below

    "version": "0.1.0",
    "configurations": [
        {
            "name": "Launch in Chrome",
            "type": "chrome",
            "request": "launch",

            // would be convenient. It does launch chome, but vs code can't talk to it for some reason.
            //  "runtimeExecutable": "c:/Program Files (x86)/Google/Chrome/Application/chrome.exe",
            //  "runtimeArgs": [ "--remote-debugging-port=9222 --incognito" ],

            //"url": "http://localhost:3030",
            "url" : "${workspaceRoot}/output/index.html",
            "webRoot": "${workspaceRoot}",
            "sourceMaps": true,
            "userDataDir": "${workspaceRoot}/output/chrome"
            ,"diagnosticLogging": true
        }
    ]
}